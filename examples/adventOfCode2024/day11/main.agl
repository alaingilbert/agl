package main

import (
    "agl1/os"
    "fmt"
)

func main() {
    fileContent := string(os.ReadFile("examples/adventOfCode2024/day11/data.txt")!)
    data := fileContent.Split(" ").Map({ $0.Uint()? })
    mut data1 := data.Clone()
    for _ in 0..25 {
        mut newData := []uint{}
        for stone in data1 {
            if stone == 0 {
                newData.Push(1)
            } else {
                stoneStr := stone.String()
                if stoneStr.Len() % 2 == 0 {
                    middle := stoneStr.Len() / 2
                    s1 := stoneStr[:middle].Uint()?
                    s2 := stoneStr[middle:].Uint()?
                    newData.Push(s1, s2)
                } else {
                    newData.Push(stone * 2024)
                }
            }
        }
        data1 = newData
    }
    fmt.Println(data1.Len())
    part2(data)
}

func part2(dataIn []uint) {
    mut data := make(map[uint]uint)
    dataIn.ForEach({ data[$0] = 1 })
    for _ in 0..75 {
        mut newData := make(map[uint]uint)
        mutMapFn := func(k, mult uint) {
            val := newData.Get(k).UnwrapOrDefault()
            newData[k] = val + mult
        }
        for stone, mult := range data {
            if stone == 0 {
                mutMapFn(1, mult)
            } else {
                stoneStr := stone.String();
                if stoneStr.Len() % 2 == 0 {
                    middle := stoneStr.Len() / 2;
                    s1 := stoneStr[:middle].Uint()?
                    s2 := stoneStr[middle:].Uint()?
                    mutMapFn(s1, mult)
                    mutMapFn(s2, mult)
                } else {
                    mutMapFn(stone * 2024, mult)
                }
            }
        }
        data = newData;
    }
    fmt.Println(data.Values().Sum())
}