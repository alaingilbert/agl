package main

import "agl1/os"

var mut data [][]string
var mut width, mut height int
var mut antenasDict = map[string][](int, int){}

func main() {
    fileContent := os.ReadFile("examples/adventOfCode2024/day8/data.txt")!
    data = string(fileContent).Lines().Map({ $0.Split("") })
    width = data.Len()
    height = data.First()?.Len()
    for y, row := range data {
        for x, col := range row {
            guard col != "." && col != "#" else { continue }
            antenasDict[col].Push((x, y))
        }
    }
    part1()
    part2()
}

func part1() {
    mut antinodes := set[(int, int)]{}
    for _, antenas := range antenasDict {
        for a1 in antenas {
            for a2 in antenas {
                guard a2 != a1 else { continue }
                dx := a2.0 - a1.0
                dy := a2.1 - a1.1
                pos := (a2.0 + dx, a2.1 + dy)
                if pos.0 >= 0 && pos.0 < width && pos.1 >= 0 && pos.1 < height {
                    antinodes.Insert(pos)
                }
            }
        }
    }
    printf(antinodes.Len())
}

func part2() {
    mut antinodes := set[(int, int)]{}
    for _, antenas := range antenasDict {
        for a1 in antenas {
            for a2 in antenas {
                guard a2 != a1 else { continue }
                dx := a2.0 - a1.0
                dy := a2.1 - a1.1
                pos := (a2.0, a2.1)
                for pos.0 >= 0 && pos.0 < width && pos.1 >= 0 && pos.1 < height {
                    antinodes.Insert(pos)
                    pos.0 += dx
                    pos.1 += dy
                }
            }
        }
    }
    printf(antinodes.Len())
}