package main

import "agl1/os"

var mut data map[i64][]i64

func main() {
    fileContent := os.ReadFile("examples/adventOfCode2024/day7/data.txt")!
    data = string(fileContent).Lines().Reduce(into: map[i64][]i64{}, {
        parts := $1.Split(": ")
        a := parts[0].I64()?
        b := parts[1].Split(" ").Map({ $0.I64()? })
        (*$0)[a] = b
    })
    part1()
    part2()
}

// concat
func cc(a, b i64) i64 {
    (a.String() + b.String()).I64()?
}

type Op enum {
    add
    mul
    cat
}

func combination(ops []Op, n int) [][]Op {
    if n == 1 {
        return ops.Reduce(into: [][]Op{}, { $0.Push([]Op{$1}) })
    }
    mut res := [][]Op{}
    combs := combination(ops, n-1)
    for _, comb := range combs {
        for _, op := range ops {
            res.Push(comb + []Op{op})
        }
    }
    return res
}

func solve(expected i64, vals []i64, ops []Op) bool {
    combs := combination(ops, vals.Len())
    for _, comb := range combs {
        var mut res i64
        for i, el := range vals {
            switch comb[i] {
                case .add: res += el
                case .mul: res *= el
                case .cat: res = cc(res, el)
            }
        }
        if res == expected {
            return true
        }
    }
    return false
}

func part1() {
    res := data.Filter({ solve($0.Key, $0.Value, []Op{Op.add, Op.mul}) }).Map({ $0.Key }).Sum()
    printf(res)
}

func part2() {
    res := data.Filter({ solve($0.Key, $0.Value, []Op{Op.add, Op.mul, Op.cat}) }).Map({ $0.Key }).Sum()
    printf(res)
}