package main

import (
    "fmt"
    "os"
)

func main() {
    data := os.ReadFile("examples/adventOfCode2024/day4/data.txt")!
    lines := string(data).Split("\n").Map({ $0.Split("") })
    height := lines.Len()
    width := lines.First()?.Len()
    fmt.Printf("part1: %d\n", part1(lines, width, height))
    fmt.Printf("part2: %d\n", part2(lines, width, height))
}

func isValidPosition(x, y, width, height int) bool {
    return x >= 0 && y >= 0 && x < width && y < height
}

func part1(lines [][]string, width, height int) int {
    var directions [](int, int)
    for _, e1 := range []int{-1, 0, 1} {
        for _, e2 := range []int{-1, 0, 1} {
            if e1 != 0 || e2 != 0 {
                directions.Push((e1, e2))
            }
        }
    }
    target := "XMAS".Split("")
    found := 0
    for y, line := range lines {
        for x := range line {
            direction_loop:
            for _, dir := range directions {
                dx, dy := dir
                for i := 0; i < target.Len(); i++ {
                    nx := x + dx * i
                    ny := y + dy * i
                    if !isValidPosition(nx, ny, width, height) || lines[ny][nx] != target[i] {
                        continue direction_loop
                    }
                }
                found++
            }
        }
    }
    return found
}

func part2(lines [][]string, width, height int) int {
    found := 0
    arr := []string{"MS", "SM"}
    for y := 1; y < height-1; y++ {
        for x := 1; x < width-1; x++ {
            if lines[y][x] == "A" {
                d1 := lines[y-1][x-1] + lines[y+1][x+1]
                d2 := lines[y-1][x+1] + lines[y+1][x-1]
                if arr.Contains(d1) && arr.Contains(d2) {
                    found++
                }
            }
        }
    }
    return found
}