package main

import (
    "fmt"
    "os"
)

func main() {
    data := os.ReadFile("examples/adventOfCode2024/day4/data.txt")!
    lines := string(data).Split("\n").Map({ $0.Split("") })
    fmt.Printf("part1: %d\n", part1(lines))
    fmt.Printf("part2: %d\n", part2(lines))
}

func isValidPosition(x, y, width, height int) bool {
    return x >= 0 && y >= 0 && x < width && y < height
}

func part1(lines [][]string) int {
    height := lines.Len()
    width := lines.First()?.Len()
    directions := make([](int, int), 0)
    for _, e1 := range []int{-1, 0, 1} {
        for _, e2 := range []int{-1, 0, 1} {
            if e1 == 0 && e2 == 0 {
                continue
            }
            directions.Push((e1, e2))
        }
    }
    target := []string{"X", "M", "A", "S"}
    found := 0
    for y, line := range lines {
        for x := range line {
            direction_loop:
            for _, dir := range directions {
                dx, dy := dir
                for i := 0; i < target.Len(); i++ {
                    nx := x + dx * i
                    ny := y + dy * i
                    if !isValidPosition(nx, ny, width, height) || lines[ny][nx] != target[i] {
                        continue direction_loop
                    }
                }
                found++
            }
        }
    }
    return found
}

func part2(lines [][]string) int {
    height := lines.Len()
    width := lines.First()?.Len()
    found := 0
    arr := []string{"MS", "SM"}
    for y := 1; y < height-1; y++ {
        for x := 1; x < width-1; x++ {
            if lines[y][x] == "A" {
                d1 := string(lines[y-1][x-1]) + string(lines[y+1][x+1])
                d2 := string(lines[y-1][x+1]) + string(lines[y+1][x-1])
                if arr.Contains({ $0 == d1 }) && arr.Contains({ $0 == d2 }) {
                    found++
                }
            }
        }
    }
    return found
}