package main

import "agl1/os"

var mut data1 [][]int
var mut updates [][]int
var mut rules map[int]set[int]

func main() {
    data := os.ReadFile("examples/adventOfCode2024/day5/data.txt")!
    parts := string(data).Split("\n\n")
    data1 = parts[0].Lines().Map({ $0.Split("|").Map({ $0.Int()? }) })
    updates = parts[1].Lines().Map({ $0.Split(",").Map({ $0.Int()? }) })
    rules = make(map[int]set[int])
    for _, d := range data1 {
        a, b := d[0], d[1]
        rules[a] = rules.Get(a).UnwrapOr(set[int]{}).Union([]int{b})
    }
    printf("part1: %d", updates.Filter(isValid).Map(middlePage).Sum())
    printf("part2: %d", updates.Filter(isInvalid).Map(fixUpdate).Map(middlePage).Sum())
}

func isInvalid(update []int) bool {
    update.Enumerated().Contains({ rules[$0.1].Intersects(update[:$0.0]) })
}

func fixUpdate(update []int) []int {
    update.Reduce([]int{}, func(mut acc []int, page int) []int {
        idx := acc.FirstIndex({ rules[page].Contains($0) }).UnwrapOr(acc.Len())
        acc.Insert(idx, page)
        return acc
    })
}

func isValid(update []int) bool { !isInvalid(update) }

func middlePage(update []int) int { update[update.Len() / 2] }
