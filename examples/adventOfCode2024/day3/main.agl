package main

import (
    "regexp"
    "agl1/os"
)

func main() {
    data := os.ReadFile("examples/adventOfCode2024/day3/data.txt")!
    printf("part1: %d", part1(data))
    printf("part2: %d", part2(data))
}

func part1(data []byte) int {
   	rgxMul := regexp.MustCompile(`mul\((\d+),(\d+)\)`)
	matches := rgxMul.FindAllStringSubmatch(string(data), -1)
    return matches.Map({ $0[1].Int()? * $0[2].Int()? }).Sum()
}

func part2(data []byte) int {
    rgx := regexp.MustCompile(`mul\((\d+),(\d+)\)|do\(\)|don't\(\)`)
	matches := rgx.FindAllStringSubmatch(string(data), -1)
	mut enabled := true
    return matches.Map({
        if $0[0] == "do()" {
			enabled = true
		} else if $0[0] == "don't()" {
			enabled = false
		} else if enabled {
			return $0[1].Int()? * $0[2].Int()?
		}
        return 0
    }).Sum()
}