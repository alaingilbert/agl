package main

import (
    "agl1/os"
    "agl1/regexp"
    "fmt"
    "agl1/strings"
)

type Robot struct {
    Position (int, int)
    Velocity (int, int)
}

var width = 101
var height = 103
var mw = width / 2
var mh = height / 2

func nums(s string) []int {
    numsRgx := regexp.MustCompile(`(-?\d+)`)
    m := numsRgx.FindAllString(s, -1)
    return m.Map({ $0.Int()? })
}

func mod(a int, n int) int {
    assert(n > 0)
    r := a % n
    return if r >= 0 { r } else { r + n }
}

func part1(robots []Robot) {
    for i in robots.Indices() {
        robots[i].Position.0 = mod((robots[i].Position.0 + 100 * robots[i].Velocity.0), width)
        robots[i].Position.1 = mod((robots[i].Position.1 + 100 * robots[i].Velocity.1), height)
    }
    q1 := robots.Filter({ $0.Position.0 < mw && $0.Position.1 < mh }).Len()
    q2 := robots.Filter({ $0.Position.0 > mw && $0.Position.1 < mh }).Len()
    q3 := robots.Filter({ $0.Position.0 < mw && $0.Position.1 > mh }).Len()
    q4 := robots.Filter({ $0.Position.0 > mw && $0.Position.1 > mh }).Len()
    fmt.Println(q1*q2*q3*q4)
}

func pp(r []Robot) string {
    rs := Set(r.Map({ $0.Position }))
    mut out := ""
    for y in 0..height {
        for x in 0..width {
            out += if rs.Contains((x, y)) { "*" } else { "." }
        }
        out += "\n"
    }
    return out
}

func part2(robots []Robot) {
    mut steps := 0
    for {
        steps += 1
        robots := robots.Clone()
        for i in robots.Indices() {
            robots[i].Position.0 = mod((robots[i].Position.0 + steps * robots[i].Velocity.0), width)
            robots[i].Position.1 = mod((robots[i].Position.1 + steps * robots[i].Velocity.1), height)
        }
        p := pp(robots)
        if strings.Contains(p, "**************") {
            fmt.Println(steps)
            break
        }
    }
}

func main() {
    fileContent := string(os.ReadFile("examples/adventOfCode2024/day14/data.txt")!)
    getRobots := func() []Robot {
        fileContent.
            Lines().
            Map({ nums($0) }).
            Map({ Robot{Position: ($0[0], $0[1]), Velocity: ($0[2], $0[3])} })
    }
    part1(getRobots())
    part2(getRobots())
}