package main

import (
    "agl1/os"
    "agl1/math"
)

func genBlocks(diskMap string) []uint? {
    diskMap.Split("").Enumerated().FlatMap(|(i, size)| {
        n := size.Int()?
        fileID := if i % 2 == 0 { Some(uint(i/2)) } else { None }
        var mut out []uint?
        for j := 0; j < n; j++ {
            out.Push(fileID)
        }
        return out
    })
}

func reorder(mut blocks []uint?) {
    mut p1 := 0;
    mut p2 := blocks.Len() - 1;
    for p1 <= p2 {
        if blocks[p1].IsSome() {
            p1++
        } else if blocks[p2].IsNone() {
            p2--
        } else {
            blocks.Swap(p1, p2)
            p1++
            p2--
        }
    }
}

func getFreeSpots(blocks []uint?) [](uint, uint) {
    var mut freeSpots [](uint, uint)
    var mut s (uint, uint)?
    s = None
    for (i, block) in blocks.Enumerated() {
        if block.IsSome() {
            if Some(s) := s {
                freeSpots.Push(s)
            }
            s = None
        } else if Some(t) := s {
            idx, size := t
            s = Some((idx, size+1))
        } else {
            s = Some((uint(i), 1))
        }
    }
    return freeSpots
}

func doSwap(mut blocks []uint?, mut freeSpots [](uint, uint), toSwap []uint) {
    swapLen := uint(toSwap.Len())
    if Some(t) := freeSpots.Enumerated().Find(|(_, (idx, size))| idx < toSwap[0] && size >= swapLen) {
        spotIdx := t.0
        startIdx := t.1.0
        for (i, el) in toSwap.Enumerated() {
            blocks.Swap(startIdx + uint(i), el);
        }
        freeSpots.With(spotIdx, |spot| {
            spot.0 += swapLen
            spot.1 -= swapLen
        })
    }
}

func reorder2(mut blocks []uint?) {
    mut freeSpots := getFreeSpots(blocks)
    var mut toSwap []uint
    mut lastFileID := uint(math.MaxUint64)
    for p2 in (0..uint(blocks.Len())).Rev() {
        if Some(blockID) := blocks[p2] {
            if !toSwap.IsEmpty() && blockID != blocks[toSwap[0]].Unwrap() {
                fileID := blocks[toSwap[0]].Unwrap();
                if fileID < lastFileID {
                    lastFileID = fileID;
                    doSwap(mut blocks, mut freeSpots, toSwap);
                }
                toSwap.Clear()
            }
            toSwap.Push(p2);
        }
    }
}

func checksum(blocks []uint?) uint {
    blocks.Enumerated().FilterMap(|(i, block)| { block.Map({ $0 * uint(i) }) }).Sum()
}

func main() {
    fileContent := string(os.ReadFile("examples/adventOfCode2024/day9/data.txt")!)
    mut blocks := genBlocks(fileContent)
    reorder(mut blocks)
    printf("part1: %d", checksum(blocks))

    mut blocks2 := genBlocks(fileContent)
    reorder2(mut blocks2);
    printf("part2: %d", checksum(blocks2));
}