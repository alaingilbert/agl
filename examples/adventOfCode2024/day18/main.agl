package main

import (
    "agl1/os"
    "agl1/regexp"
    "fmt"
)

var mut data [][]int
var width = 71
var height = 71
var grid = make([][]bool, height)

func nums(s string) []int {
    numsRgx := regexp.MustCompile(`(-?\d+)`)
    m := numsRgx.FindAllString(s, -1)
    return m.Map({ $0.Int()? })
}

type Position struct {
    x, y int
}

var dirs = [](int, int){(0, -1), (1, 0), (0, 1), (-1, 0)}

func bfs(grid [][]bool) set[Position]? {
    start := Position{x: 0, y: 0}
    end := Position{x: width-1, y: height-1}
    mut q := []Position{start}
    mut seen := make(map[Position]Position)
    for !q.IsEmpty() {
        e := q.RemoveFirst()
        if e == end {
            mut path := set[Position]{}
            path.Insert(start)
            mut res := 1
            mut el := e
            for {
                p := seen[el]
                guard p != start else { break }
                res += 1
                el = p
                path.Insert(p)
            }
            return Some(path)
        }
        for dir in dirs {
            nx, ny := (e.x + dir.0, e.y + dir.1)
            next := Position{x: nx, y: ny}
            if nx >= 0 && nx < width && ny >= 0 && ny < height && !grid[ny][nx] && !seen.ContainsKey(next) {
                seen[next] = e
                q.Push(next)
            }
        }
    }
    return None
}

func coord(at int) (int, int) { (data[at][0], data[at][1]) }

func buildGrid(idx int) [][]bool {
    mut grid := grid.Clone()
    for i in 0..height {
        grid[i] = make([]bool, width)
    }
    for i in data.Indices() {
        if i < idx {
            x, y := coord(i)
            grid[y][x] = true
        }
    }
    return grid
}

func part1() {
    grid := buildGrid(1024)
    fmt.Println(bfs(grid)?.Len())
}

func part2() {
    mut low, mut high := (1024, data.Len()-1)
    for low != high {
        mid := (high + low) / 2
        grid := buildGrid(mid)
        if bfs(grid).IsNone() {
            high = mid
        } else {
            low = mid + 1
        }
    }
    x, y := coord(low-1)
    fmt.Printf("%d,%d\n", x, y)
}

func main() {
    fileContent := string(os.ReadFile("examples/adventOfCode2024/day18/data.txt")!)
    data = fileContent.Lines().Map({ nums($0) })
    part1()
    part2()
}