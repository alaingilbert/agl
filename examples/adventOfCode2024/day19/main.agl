package main

import "agl1/os"

var mut towels []string
var mut desiredDesigns []string

func isDesignPossible(design string) bool {
    if design.IsEmpty() {
        return true
    }
    for towel in towels {
        guard design.HasPrefix(towel) else { continue }
        mut subDesign := design
        subDesign = subDesign.TrimPrefix(towel)
        if isDesignPossible(subDesign) {
            return true
        }
    }
    return false
}

func countDesignPossible(design string, mut cache map[string]int) int {
    if design.IsEmpty() {
        return 1
    }
    if Some(cached) := cache.Get(design) {
        return cached
    }
    mut count := 0
    for towel in towels {
        guard design.HasPrefix(towel) else { continue }
        mut subDesign := design
        subDesign = subDesign.TrimPrefix(towel)
        count += countDesignPossible(subDesign, mut cache)
    }
    cache[design] = count
    return count
}

func part1() {
    printf("%d", desiredDesigns.Filter({ isDesignPossible($0) }).Len())
}

func part2() {
    mut cache := make(map[string]int)
    printf("%d", desiredDesigns.Reduce(0, { $0 + countDesignPossible($1, mut cache) }))
}

func main() {
    fileContent := string(os.ReadFile("examples/adventOfCode2024/day19/data.txt")!)
    parts := fileContent.Split("\n\n")
    towels = parts[0].Split(", ")
    desiredDesigns = parts[1].Lines()
    part1()
    part2()
}