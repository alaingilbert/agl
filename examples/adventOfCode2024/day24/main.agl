package main

import "agl1/os"

var mut data1 [](string, int)
var mut data2 []([]string, string)

func part1() {
    mut m := data1.Reduce(into: map[string]int{}, { $0[$1.0] = $1.1 })
    mut q := data2
    for !q.IsEmpty() {
        a, b := q.RemoveFirst()
        guard Some(n1) := m.Get(a[0]) else {
            q.Push((a, b))
            continue
        }
        guard Some(n2) := m.Get(a[2]) else {
            q.Push((a, b))
            continue
        }
        op := a[1]
        mut res := 0
        switch op {
            case "AND": res = n1 & n2
            case "OR":  res = n1 | n2
            case "XOR": res = n1 ^ n2
            default: panic("invalid")
        }
        m[b] = res
    }
    x := m.Keys().Filter({ $0.HasPrefix("x") }).Sorted().Reversed()
    y := m.Keys().Filter({ $0.HasPrefix("y") }).Sorted().Reversed()
    z := m.Keys().Filter({ $0.HasPrefix("z") }).Sorted().Reversed()
    xRes := x.Reduce(0, { $0 << 1 | m[$1] })
    yRes := y.Reduce(0, { $0 << 1 | m[$1] })
    zRes := z.Reduce(0, { $0 << 1 | m[$1] })
    _, _ = xRes, yRes
    printf(zRes)
}

func main() {
    fileContent := string(os.ReadFile("examples/adventOfCode2024/day24/data.txt")!)
    parts := fileContent.Split("\n\n")
    data1 = parts[0].Lines().Map({ $0.Split(": ") }).Map({ ($0[0], $0[1].Int()?) })
    data2 = parts[1].Lines().Map({ $0.Split(" -> ") }).Map({ ($0[0].Split(" "), $0[1]) })
    part1()
}