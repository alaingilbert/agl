package main

import "math/rand"
import "iter"

// Creates a sequence of pairs built out of two underlying sequences.
func zip[T, U any](a []T, b []U) [](T, U) {
	mut out := make([](T, U), 0)
	for i := range a {
		if len(a) <= i || len(b) <= i {
			break
		}
		out.Push((a[i], b[i]))
	}
	return out
}

func zip2[T, U any](a []T, b []U) iter.Seq[(T, U)] {
	return func(yield func((T, U)) bool) {
        for i := range a {
            if len(a) <= i || len(b) <= i {
                break
            }
            if !yield((a[i], b[i])) {
                return
            }
        }
        return
	}
}

func (v agl1.Vec[T]) Iter() iter.Seq[T] {
	return func(yield func(T) bool) {
		for _, e := range v {
			if !yield(e) {
				return
			}
		}
	}
}

func (v agl1.Vec[T]) Enumerated() [](int, T) {
	mut out := make([](int, T), 0)
	for i := range v {
		out.Push((i, v[i]))
	}
	return out
}

func (v agl1.Vec[T]) CompactMap[R any](f func(T) R?) []R {
	mut out := make([]R, 0)
	for _, el := range v {
		if Some(res) := f(el) {
			out.Push(res)
		}
	}
	return out
}

func (v agl1.Vec[T]) FlatMap[R any](f func(T) []R) []R {
	mut out := make([]R, 0)
	for _, el := range v {
		subArr := f(el)
		for _, el1 := range subArr {
			out.Push(el1)
		}
	}
	return out
}

func (v agl1.Vec[T]) ForEach(f func(T) void) {
	for i := range v {
		f(v[i])
	}
}

func (v agl1.Vec[T]) Last() T? {
	if len(v) > 0 {
		return Some(v[len(v)-1])
	}
	return None
}

func (v agl1.Vec[T]) Get(i int) T? {
	if i >= 0 && i <= len(v)-1 {
		return Some(v[i])
	}
	return None
}

// The number of elements in the array.
func (v agl1.Vec[T]) Len() int {
	return len(v)
}

func (v agl1.Vec[T]) IsEmpty() bool {
	return len(v) == 0
}

func (v agl1.Vec[T]) Min() T? {
	if len(v) == 0 {
		return None
	}
	mut out := v[0]
	for _, el := range v {
		out = min(out, el)
	}
	return Some(out)
}

func (v agl1.Vec[T]) Max() T? {
	if len(v) == 0 {
		return None
	}
	mut out := v[0]
	for _, el := range v {
		out = max(out, el)
	}
	return Some(out)
}

func (v agl1.Vec[T]) Reversed() []T {
	mut out := make([]T, len(v))
	for i := 0; i < len(v); i++ {
		out[i] = v[len(v)-1-i]
	}
	return out
}

func (v agl1.Vec[T]) First() T? {
	if len(v) > 0 {
		return Some(v[0])
	}
	return None
}

func (v agl1.Vec[T]) First(where: predicate func(T) bool) T? {
	if len(v) == 0 {
		return None
	}
	for _, el := range v {
		if predicate(el) {
			return Some(el)
		}
	}
	return None
}

// func (s agl1.Sequence[T]) Enumerated() Sequence[(int, T)] {
// 	return func(yield func(T) bool) {
// 	    for e := range s {
//             if !yield((i, e)) {
//                 return
//             }
// 	    }
// 	}
// }

func (v agl1.Vec[T]) Shuffled() []T {
	out := make([]T, len(v))
	for i := 0; i < len(v); i++ {
		out[i] = v[i]
	}
	rand.Shuffle(len(v), func(i, j int) {
		out[i], out[j] = out[j], out[i]
	})
	return out
}

//func (s agl1.Set[T]) == (other agl1.Set) bool {
//	if s.Len() != other.Len() {
//	    return false
//	}
//	for k := range s {
//	    if !other.Contains(k) {
//	        return false
//	    }
//	}
//	return true
//}
