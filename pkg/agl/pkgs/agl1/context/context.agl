package context

//type CancelCauseFunc func(cause error)
//type CancelFunc func()
type Context interface {}

func AfterFunc(ctx Context, f func()) (func() bool)
func Cause(c Context) error
//func WithCancel(parent Context) (Context, CancelFunc)
//func WithCancelCause(parent Context) (Context, CancelCauseFunc)
//func WithDeadline(parent Context, d time.Time) (Context, CancelFunc)
//func WithDeadlineCause(parent Context, d time.Time, cause error) (Context, CancelFunc)
//func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)
//func WithTimeoutCause(parent Context, timeout time.Duration, cause error) (Context, CancelFunc)

func Background() Context
func TODO() Context
func WithValue(parent Context, key, val any) Context
func WithoutCancel(parent Context) Context