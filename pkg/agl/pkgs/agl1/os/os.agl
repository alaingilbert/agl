package os

import "agl1/io/fs"

type DirEntry interface {
	IsDir() bool
	Name() string
}

type FileMode u32

type FileInfo interface {
}

type File struct {
}

func (*File) Close() error
func (*File) Read(b []byte) int!

func DirFS(dir string) fs.FS
func Open(name string) (*File)!

var Stdout *File
var Stderr *File

// file.go:799:6
func ReadFile(name string) ([]byte)!
// dir.go:118:6
func ReadDir(name string) ([]DirEntry)!
// file.go:849:6
func WriteFile(name string, data []byte, perm FileMode) !
func Chdir(string) ! {}
func Chown(name string, uid, gid int) !
func Mkdir(name string, perm FileMode) !
func MkdirAll(path string, perm FileMode) !
func MkdirTemp(dir, pattern string) string!
// file_unix.go:375:6
func Remove(name string) !
// path.go:73:6
func RemoveAll(path string) !
func Rename(oldpath, newpath string) !
func SameFile(fi1, fi2 FileInfo) bool
func TempDir() string
func Truncate(name string, size int64) !
func Setenv(key, value string) !
func Unsetenv(key string) !
func UserCacheDir() string!
func UserConfigDir() string!
func UserHomeDir() string!
func Getwd() string!
func Hostname() string!
func IsExist(err error) bool
func IsNotExist(err error) bool
func IsPathSeparator(c uint8) bool
func IsPermission(err error) bool
func IsTimeout(err error) bool
func LookupEnv(key string) string?
type Args []string
// proc.go:62:6
func Exit(code int)