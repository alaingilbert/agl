package strings

import "agl1/io"
import "agl1/iter"

type Reader struct {}
type Builder struct {}
type Replacer struct {}

func Clone(s string) string
func Compare(a, b string) int
func Contains(s, substr string) bool
func ContainsAny(s, chars string) bool
func ContainsFunc(s string, f func(rune) bool) bool
func ContainsRune(s string, r rune) bool
func Count(s, substr string) int
func Cut(s, sep string) (string, string, bool)
func CutPrefix(s, prefix string) (string, bool)
func CutSuffix(s, suffix string) (string, bool)
func EqualFold(s, t string) bool
func Fields(s string) []string
func FieldsFunc(s string, f func(rune) bool) []string
//func FieldsFuncSeq(s string, f func(rune) bool) iter.Seq[string]
//func FieldsSeq(s string) iter.Seq[string]
func HasPrefix(s, prefix string) bool
func HasSuffix(s, suffix string) bool
func Index(s, substr string) int
func IndexAny(s, chars string) int
func IndexByte(s string, c byte) int
func IndexFunc(s string, f func(rune) bool) int
func IndexRune(s string, r rune) int
func Join(elems []string, sep string) string
func LastIndex(s, substr string) int
func LastIndexAny(s, chars string) int
func LastIndexByte(s string, c byte) int
func LastIndexFunc(s string, f func(rune) bool) int
//func Lines(s string) iter.Seq[string]
//func Map(mapping func(rune) rune, s string) string
func Repeat(s string, count int) string
func Replace(s, old, new string, n int) string
func ReplaceAll(s, old, new string) string
func Split(s, sep string) []string
func SplitAfter(s, sep string) []string
func SplitAfterN(s, sep string, n int) []string
//func SplitAfterSeq(s, sep string) iter.Seq[string]
func SplitN(s, sep string, n int) []string
//func SplitSeq(s, sep string) iter.Seq[string]
func Title(s string) string
func ToLower(s string) string
//func ToLowerSpecial(c unicode.SpecialCase, s string) string
func ToTitle(s string) string
//func ToTitleSpecial(c unicode.SpecialCase, s string) string
func ToUpper(s string) string
//func ToUpperSpecial(c unicode.SpecialCase, s string) string
func ToValidUTF8(s, replacement string) string
func Trim(s, cutset string) string
func TrimFunc(s string, f func(rune) bool) string
func TrimLeft(s, cutset string) string
func TrimLeftFunc(s string, f func(rune) bool) string
func TrimPrefix(s, prefix string) string
func TrimRight(s, cutset string) string
func TrimRightFunc(s string, f func(rune) bool) string
func TrimSpace(s string) string
func TrimSuffix(s, suffix string) string

func NewReader(s string) *strings.Reader
func (r *strings.Reader) Len() int
func (r *strings.Reader) Read(b []byte) (int, error)
func (r *strings.Reader) ReadAt(b []byte, off int64) (int, error)
func (r *strings.Reader) ReadByte() (byte, error)
func (r *strings.Reader) ReadRune() (rune, int, error)
func (r *strings.Reader) Reset(s string)
func (r *strings.Reader) Seek(offset int64, whence int) (i64, error)
func (r *strings.Reader) Size() i64
func (r *strings.Reader) UnreadByte() error
func (r *strings.Reader) UnreadRune() error
func (r *strings.Reader) WriteTo(w io.Writer) (int64, error)

func (s *strings.Builder) Write(p []byte) (int, error)
func (s *strings.Builder) WriteByte(c byte) error
func (s *strings.Builder) WriteRune(r rune) (int, error)
func (mut s *strings.Builder) WriteString(s string) (int, error)
func (s *strings.Builder) String() string
func (s *strings.Builder) Reset()
func (s *strings.Builder) Len() int
func (s *strings.Builder) Grow(n int)
func (s *strings.Builder) Cap() int

func NewReplacer(oldnew ...string) *strings.Replacer
func (mut r *strings.Replacer) Replace(s string) string
func (mut r *strings.Replacer) WriteString(w io.Writer, s string) (int, error)