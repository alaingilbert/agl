package bufio

type Reader struct{}
type ReadWriter struct {}
type Scanner struct {}
type Writer struct {}

func ScanBytes(data []byte, atEOF bool) (int, []byte)!

func NewReadWriter(r *Reader, w *Writer) *ReadWriter

func NewReader(rd io.Reader) *Reader
func NewReaderSize(rd io.Reader, size int) *Reader
func (b *Reader) Buffered() int
func (b *Reader) Discard(n int) int!
func (b *Reader) Peek(n int) ([]byte)!
func (b *Reader) Read(p []byte) int!
func (b *Reader) ReadByte() byte!
func (b *Reader) ReadBytes(delim byte) ([]byte)!
func (b *Reader) ReadLine() ([]byte, bool)!
func (b *Reader) ReadRune() (rune, int)!
func (b *Reader) ReadSlice(delim byte) ([]byte)!
func (b *Reader) ReadString(delim byte) string!
func (b *Reader) Reset(r io.Reader)
func (b *Reader) Size() int
func (b *Reader) UnreadByte() error
func (b *Reader) UnreadRune() error
func (b *Reader) WriteTo(w io.Writer) int64!

func NewScanner(r io.Reader) *Scanner
func (s *Scanner) Buffer([]byte, int)
func (s *Scanner) Bytes() []byte
//func (s *Scanner) Err() !
func (s *Scanner) Scan() bool
func (s *Scanner) Split(split SplitFunc)
func (s *Scanner) Text() string

func NewWriter(w io.Writer) *Writer
func NewWriterSize(w io.Writer, size int) *Writer
func (b *Writer) Available() int
func (b *Writer) AvailableBuffer() []byte
func (b *Writer) Buffered() int
func (b *Writer) Flush() !
func (b *Writer) ReadFrom(r io.Reader) int64!
func (b *Writer) Reset(w io.Writer)
func (b *Writer) Size() int
func (b *Writer) Write(p []byte) int!
func (b *Writer) WriteByte(c byte) !
func (b *Writer) WriteRune(r rune) int!
func (b *Writer) WriteString(s string) int!