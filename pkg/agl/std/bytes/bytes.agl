package bytes

import "iter"

type Buffer struct {}
type Reader struct {}

func NewBuffer(buf []byte) *bytes.Buffer
func (b *Buffer) Available() int
func (b *Buffer) AvailableBuffer() []byte
func (b *Buffer) Bytes() []byte
func (b *Buffer) Cap() int
func (b *Buffer) Grow(n int)
func (b *Buffer) Len() int
func (b *Buffer) Next(n int) []byte
func (b *Buffer) Read(p []byte) int!
func (b *Buffer) ReadByte() byte!
func (b *Buffer) ReadBytes(delim byte) ([]byte)!
func (b *Buffer) ReadFrom(r io.Reader) i64!
func (b *Buffer) ReadRune() (rune, int)!
func (b *Buffer) ReadString(delim byte) string!
func (b *Buffer) Reset()
func (b *Buffer) String() string
func (b *Buffer) Truncate(n int)
func (b *Buffer) UnreadByte() !
func (b *Buffer) UnreadRune() !
func (b *Buffer) Write(p []byte) int!
func (b *Buffer) WriteByte(c byte) !
func (b *Buffer) WriteRune(r rune) int!
func (b *Buffer) WriteString(s string) int!
func (b *Buffer) WriteTo(w io.Writer) i64!

func NewReader(b []byte) *bytes.Reader
func (r *Reader) Len() int
func (r *Reader) Read(b []byte) int!
func (r *Reader) ReadAt(b []byte, off int64) int!
func (r *Reader) ReadByte() byte!
func (r *Reader) ReadRune() (rune, int)!
func (r *Reader) Reset(b []byte)
func (r *Reader) Seek(offset int64, whence int) i64!
func (r *Reader) Size() i64
func (r *Reader) UnreadByte() !
func (r *Reader) UnreadRune() !
func (r *Reader) WriteTo(w io.Writer) i64!

func Clone(b []byte) []byte
func Compare(a, b []byte) int
func Contains(b, subslice []byte) bool
func ContainsAny(b []byte, chars string) bool
func ContainsFunc(b []byte, f func(rune) bool) bool
func ContainsRune(b []byte, r rune) bool
func Count(s, sep []byte) int
func Cut(s, sep []byte) ([]byte, []byte, bool)
func CutPrefix(s, prefix []byte) ([]byte, bool)
func CutSuffix(s, suffix []byte) ([]byte, bool)
func Equal(a, b []byte) bool
func EqualFold(s, t []byte) bool
func Fields(s []byte) [][]byte
func FieldsFunc(s []byte, f func(rune) bool) [][]byte
//func FieldsFuncSeq(s []byte, f func(rune) bool) iter.Seq[[]byte]
//func FieldsSeq(s []byte) iter.Seq[[]byte]
func HasPrefix(s, prefix []byte) bool
func HasSuffix(s, suffix []byte) bool
func Index(s, sep []byte) int
func IndexAny(s []byte, chars string) int
func IndexByte(b []byte, c byte) int
func IndexFunc(s []byte, f func(r rune) bool) int
func IndexRune(s []byte, r rune) int
func Join(s [][]byte, sep []byte) []byte
func LastIndex(s, sep []byte) int
func LastIndexAny(s []byte, chars string) int
func LastIndexByte(s []byte, c byte) int
//func LastIndexFunc(s []byte, f func(rune) bool) int
//func Lines(s []byte) iter.Seq[[]byte]
//func Map(mapping func(rune) rune, s []byte) []byte
func Repeat(b []byte, count int) []byte
func Replace(s, old, new []byte, n int) []byte
func ReplaceAll(s, old, new []byte) []byte
//func Runes(s []byte) []rune
func Split(s, sep []byte) [][]byte
func SplitAfter(s, sep []byte) [][]byte
func SplitAfterN(s, sep []byte, n int) [][]byte
//func SplitAfterSeq(s, sep []byte) iter.Seq[[]byte]
func SplitN(s, sep []byte, n int) [][]byte
//func SplitSeq(s, sep []byte) iter.Seq[[]byte]
func ToLower(s []byte) []byte
//func ToLowerSpecial(c unicode.SpecialCase, s []byte) []byte
func ToTitle(s []byte) []byte
//func ToTitleSpecial(c unicode.SpecialCase, s []byte) []byte
func ToUpper(s []byte) []byte
//func ToUpperSpecial(c unicode.SpecialCase, s []byte) []byte
func ToValidUTF8(s, replacement []byte) []byte
func Trim(s []byte, cutset string) []byte
func TrimFunc(s []byte, f func(r rune) bool) []byte
func TrimLeft(s []byte, cutset string) []byte
func TrimLeftFunc(s []byte, f func(r rune) bool) []byte
func TrimPrefix(s, prefix []byte) []byte
func TrimRight(s []byte, cutset string) []byte
func TrimRightFunc(s []byte, f func(r rune) bool) []byte
func TrimSpace(s []byte) []byte
func TrimSuffix(s, suffix []byte) []byte