package atomic

type Bool struct {}
type Int32 struct {}
type Int64 struct {}
type Pointer struct {}
type Uint32 struct {}
type Uint64 struct {}
type Uintptr struct {}
type Value struct {}

func AddInt32(addr *int32, delta int32) int32
func AddInt64(addr *int64, delta int64) int64
func AddUint32(addr *uint32, delta uint32) uint32
func AddUint64(addr *uint64, delta uint64) uint64
func AddUintptr(addr *uintptr, delta uintptr) uintptr
func AndInt32(addr *int32, mask int32) int32
func AndInt64(addr *int64, mask int64) int64
func AndUint32(addr *uint32, mask uint32) uint32
func AndUint64(addr *uint64, mask uint64) uint64
func AndUintptr(addr *uintptr, mask uintptr) uintptr
func CompareAndSwapInt32(addr *int32, old, new int32) bool
func CompareAndSwapInt64(addr *int64, old, new int64) bool
//func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) bool
func CompareAndSwapUint32(addr *uint32, old, new uint32) bool
func CompareAndSwapUint64(addr *uint64, old, new uint64) bool
func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) bool
func LoadInt32(addr *int32) int32
func LoadInt64(addr *int64) int64
//func LoadPointer(addr *unsafe.Pointer) unsafe.Pointer
func LoadUint32(addr *uint32) uint32
func LoadUint64(addr *uint64) uint64
func LoadUintptr(addr *uintptr) uintptr
func OrInt32(addr *int32, mask int32) int32
func OrInt64(addr *int64, mask int64) int64
func OrUint32(addr *uint32, mask uint32) uint32
func OrUint64(addr *uint64, mask uint64) uint64
func OrUintptr(addr *uintptr, mask uintptr) uintptr
func StoreInt32(addr *int32, val int32)
func StoreInt64(addr *int64, val int64)
//func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)
func StoreUint32(addr *uint32, val uint32)
func StoreUint64(addr *uint64, val uint64)
func StoreUintptr(addr *uintptr, val uintptr)
func SwapInt32(addr *int32, new int32) int32
func SwapInt64(addr *int64, new int64) int64
//func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) unsafe.Pointer
func SwapUint32(addr *uint32, new uint32) uint32
func SwapUint64(addr *uint64, new uint64) uint64
func SwapUintptr(addr *uintptr, new uintptr) uintptr

func (x *Bool) CompareAndSwap(old, new bool) bool
func (x *Bool) Load() bool
func (x *Bool) Store(val bool)
func (x *Bool) Swap(new bool) bool

func (x *Int32) Add(delta int32) int32
func (x *Int32) And(mask int32) int32
func (x *Int32) CompareAndSwap(old, new int32) bool
func (x *Int32) Load() int32
func (x *Int32) Or(mask int32) int32
func (x *Int32) Store(val int32)
func (x *Int32) Swap(new int32) int32

func (x *Int64) Add(delta int64) int64
func (x *Int64) And(mask int64) int64
func (x *Int64) CompareAndSwap(old, new int64) bool
func (x *Int64) Load() int64
func (x *Int64) Or(mask int64) int64
func (x *Int64) Store(val int64)
func (x *Int64) Swap(new int64) int64

//func (x *Pointer[T]) CompareAndSwap(old, new *T) bool
//func (x *Pointer[T]) Load() *T
//func (x *Pointer[T]) Store(val *T)
//func (x *Pointer[T]) Swap(new *T) *T

func (x *Uint32) Add(delta uint32) uint32
func (x *Uint32) And(mask uint32) uint32
func (x *Uint32) CompareAndSwap(old, new uint32) bool
func (x *Uint32) Load() uint32
func (x *Uint32) Or(mask uint32) uint32
func (x *Uint32) Store(val uint32)
func (x *Uint32) Swap(new uint32) uint32

func (x *Uint64) Add(delta uint64) uint64
func (x *Uint64) And(mask uint64) uint64
func (x *Uint64) CompareAndSwap(old, new uint64) bool
func (x *Uint64) Load() uint64
func (x *Uint64) Or(mask uint64) uint64
func (x *Uint64) Store(val uint64)
func (x *Uint64) Swap(new uint64) uint64

func (x *Uintptr) Add(delta uintptr) uintptr
func (x *Uintptr) And(mask uintptr) uintptr
func (x *Uintptr) CompareAndSwap(old, new uintptr) bool
func (x *Uintptr) Load() uintptr
func (x *Uintptr) Or(mask uintptr) uintptr
func (x *Uintptr) Store(val uintptr)
func (x *Uintptr) Swap(new uintptr) uintptr

func (v *Value) CompareAndSwap(old, new any) bool
func (v *Value) Load() any
func (v *Value) Store(val any)
func (v *Value) Swap(new any) any