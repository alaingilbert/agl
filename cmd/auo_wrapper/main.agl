package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"go/types"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"reflect"
)

func main() {
	goroot := runtime.GOROOT()
	fileName := "request.go"
	filePath := filepath.Join(goroot, "src", "net", "http", fileName)
	src := os.ReadFile(filePath)!
	fset := token.NewFileSet()
	node := parser.ParseFile(fset, fileName, src, parser.AllErrors)!
	conf := types.Config{Importer: nil}
	info := &types.Info{Defs: make(map[*ast.Ident]types.Object)}
	conf.Check("", fset, []*ast.File{node}, info)
	for _, decl := range node.Decls {
	 	switch d := decl.(type) {
	 	case *ast.FuncDecl:
			if d.Recv == nil {
	 			wrapFn(fset, d)
	 		}
		case *ast.GenDecl:
			wrapGenDecl(fset, d)
	 	}
	}
}

func astToStr(n ast.Expr) string {
	var out string
	switch param := n.(type) {
	case *ast.SelectorExpr:
		out = param.X.(*ast.Ident)?.Name + "." + param.Sel.Name
	case *ast.Ident:
		out = param.Name
	case *ast.StarExpr:
		out = "*" + astToStr(param.X)
	default:
		panic(fmt.Sprintf("%v", reflect.TypeOf(n)))
	}
	return out
}

func wrapGenDecl(fset *token.FileSet, decl *ast.GenDecl) {
	for _, s := range decl.Specs {
		switch spec := s.(type) {
		case *ast.TypeSpec:
			switch spec.Type.(type) {
			case *ast.StructType:
				fmt.Printf("struct %s {}\n", spec.Name)
			case *ast.InterfaceType:
				fmt.Println("interface: ", spec)
			}
		}
	}
}

func wrapFn(fset *token.FileSet, decl *ast.FuncDecl) {
	env := map[string]string{
		"io.Reader": "interface",
	}

 	var paramsArr []string
 	for _, param := range decl.Type.Params.List {	
		names := param.Names.Map({ $0.Name }).Joined(", ")	
		typeName := astToStr(param.Type)
		if env[typeName] == "interface" { // interfaces can be "nil", we use Option instead
			typeName = "Option[" + typeName + "]"
		}
		parts := []string{names, typeName}
		paramsArr.Push(parts.Joined(" "))
 	}
	
	fnName := decl.Name.Name
	paramsStr := paramsArr.Joined(", ")
	
	var resultStr string
	if decl.Type.Results != nil {
		results := decl.Type.Results.List
		var arr []string
		for _, res := range results {
			arr.Push(astToStr(res.Type))
		}
		last := arr.Last()?
		lastIsErr := last == "error"
		arr.PopIf({ lastIsErr })
		if arr.IsEmpty() {
			resultStr = "AglVoid"
		} else {
			resultStr = arr.Joined(", ")
			if arr.Len() > 1 { // more than 1 value, return a Tuple
				resultStr = "(" + resultStr + ")"
			}
		}
		if lastIsErr {
			resultStr = "Result[" + resultStr + "]"
		}
		resultStr = " " + resultStr
 	}

	var sb strings.Builder
	sb.WriteString("func " + fnName + "(" + paramsStr + ")" + resultStr + " {}")
	fmt.Println(sb.String())
}
