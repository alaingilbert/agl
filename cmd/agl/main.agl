// agl:disable(mut_check)
package main

import (
	"agl/pkg/agl"
	"agl1/context"
	"agl1/errors"
	"agl1/fmt"
	"agl1/io/fs"
	"agl1/go/ast"
	"agl1/go/parser"
	"agl1/go/token"
	"agl1/go/types"
	"agl1/os"
	"agl1/os/exec"
	"agl1/path/filepath"
	"agl1/runtime/debug"

	"github.com/urfave/cli/v3"
)

var version = "0.0.1"

func main() {
	defer func() {
		if r := recover(); r != nil {
			var aglErr *agl.AglError
			if err, ok := r.(error); ok && errors.As(err, &aglErr) {
				msg := aglErr.Error()
				if msg == "" {
					msg += string(debug.Stack())
				}
				fmt.Fprintln(os.Stderr, msg)
				os.Exit(1)
			}
			panic(r)
		}
	}()
	cmd := &cli.Command{
		Name:    "AGL",
		Usage:   "AnotherGoLang",
		Version: version,
		Commands: []*cli.Command{
			{
				Name:    "run",
				Aliases: []string{"r"},
				Usage:   "run command",
				Flags: []cli.Flag{
					&cli.BoolFlag{Name: "debug"},
				},
				Action: runAction,
			},
			{
				Name:    "build",
				Aliases: []string{"b"},
				Usage:   "build command",
				Action:  buildAction,
			},
			{
				Name:   "clean",
				Usage:  "cleanup agl generated files",
				Action: cleanupAction,
			},
			{
				Name:    "execute",
				Aliases: []string{"e"},
				Usage:   "execute command",
				Action:  executeAction,
			},
			{
				Name:   "version",
				Usage:  "print AGL version",
				Action: versionAction,
			},
			{
				Name: "mod",
				Commands: []*cli.Command{
					{
						Name:   "init",
						Usage:  "initialize a new module",
						Action: modInitAction,
					},
					{
						Name:   "tidy",
						Action: modTidyAction,
					},
					{
						Name:   "vendor",
						Action: modVendorAction,
					},
				},
			},
		},
		Action: startAction,
	}
	if err := cmd.Run(context.Background(), os.Args); err != nil {
		panic(err)
	}
}

func spawnGoRunFromBytes(source []byte, programArgs []string) ! {
	// Create a temporary directory
	tmpDir := os.MkdirTemp("", "gorun")!
	defer os.RemoveAll(tmpDir) // clean up

	// Create a .go file inside it
	tmpFile := filepath.Join(tmpDir, "main.go")
	os.WriteFile(tmpFile, source, 0644)!

	coreFile := filepath.Join(tmpDir, "aglCore.go")
	os.WriteFile(coreFile, agl.GenCore("main").AsBytes(), 0644)!

	// Run `go run` on the file with additional arguments
	cmdArgs := []string{"run", tmpFile, coreFile}
	cmdArgs.Push(programArgs...)
	cmd := exec.Command("go", cmdArgs...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	return cmd.Run()!
}

func runAction(ctx context.Context, cmd *cli.Command) error {
	debugFlag := cmd.Bool("debug")

	defer func() {
		if r := recover(); r != nil {
			var aglErr *agl.AglError
			if err, ok := r.(error); ok && errors.As(err, &aglErr) {
				msg := aglErr.Error()
				if msg == "" || debugFlag {
					msg += string(debug.Stack())
				}
				fmt.Fprintln(os.Stderr, msg)!
				os.Exit(1)
			}
			var inferErr *agl.InferError
			if err, ok := r.(error); ok && errors.As(err, &inferErr) {
				msg := inferErr.Error()
				if msg == "" || debugFlag {
					msg += string(debug.Stack())
				}
				fmt.Fprintln(os.Stderr, msg)!
				os.Exit(1)
			}
			panic(r)
		}
	}()

	if cmd.NArg() == 0 {
		fmt.Println("You must specify a file to compile")
		return nil
	}
	fileName := cmd.Args().Get(0)
	if !fileName.HasSuffix(".agl") {
		fmt.Println("file must have '.agl' extension")
		return nil
	}
	by := os.ReadFile(fileName)!
	fset, f, f2 := agl.ParseSrc(string(by))
	env := agl.NewEnv(fset)
	i := agl.NewInferrer(env)
	errs := i.InferFile(fileName, f, fset, true)
	if !errs.IsEmpty() {
		panic(errs[0])
	}
	src := agl.NewGenerator(i.Env, f, f2, fset).Generate()

	// Get any additional arguments to pass to the program
	var programArgs []string
	if cmd.NArg() > 1 {
		programArgs = cmd.Args().Slice()[1:] // Skip the .agl filename
	}

	spawnGoRunFromBytes(src.AsBytes(), programArgs)!
	return nil
}

func executeAction(ctx context.Context, cmd *cli.Command) error {
	defer func() {
		if r := recover(); r != nil {
			fmt.Println("EXIT_CODE:1")!
			var aglErr *agl.AglError
			if err, ok := r.(error); ok && errors.As(err, &aglErr) {
				msg := aglErr.Error()
				if msg == "" {
					msg += string(debug.Stack())
				}
				fmt.Fprintln(os.Stderr, msg)!
				os.Exit(1)
			}
			panic(r)
		}
	}()
	var input string
	if cmd.NArg() > 0 {
		input = cmd.Args().Get(0)
	}
	fset, f, f2 := agl.ParseSrc(input)
	env := agl.NewEnv(fset)
	i := agl.NewInferrer(env)
	i.InferFile("", f, fset, true)
	src := agl.NewGenerator(i.Env, f, f2, fset).Generate()
	coreHeaders := agl.GenHeaders()

	out := insertHeadersAfterFirstLine(src, coreHeaders) + agl.GenContent()
	fmt.Println(out)
	return nil
}


// Walk the current directory and subdirectories and delete all `*.go` files that start with `// agl:generated`
func cleanupAction(ctx context.Context, cmd *cli.Command) error {
	generatedFilePrefix := "// agl:generated\n"
	_ = fs.WalkDir(os.DirFS("."), ".", func(path string, d fs.DirEntry, err error) error {
		base := filepath.Base(path)
		if d.IsDir() && (base == "vendor" || base == "node_modules") {
			return fs.SkipDir
		}
		guard path.HasSuffix(".go") else { return nil }
		file := os.Open(path)!
		defer file.Close()
		buf := make([]byte, len(generatedFilePrefix))
		file.Read(buf)!
		guard buf == generatedFilePrefix.AsBytes() else { return nil }
		fmt.Println("removing", path)
		os.Remove(path)!
		return nil
	})
	return nil
}

func buildAction(ctx context.Context, cmd *cli.Command) error {
	if cmd.NArg() == 0 {
		if Err(err) := buildProject() {
			return err
		}
		return nil
	}
	fileName := cmd.Args().Get(0)
	if !fileName.HasSuffix(".agl") {
		fmt.Println("file must have '.agl' extension")
		return nil
	}
	by := os.ReadFile(fileName)!
	fset, f, f2 := agl.ParseSrc(string(by))
	env := agl.NewEnv(fset)
	i := agl.NewInferrer(env)
	i.InferFile(fileName, f, fset, true)
	src := agl.NewGenerator(i.Env, f, f2, fset).Generate()
	path := fileName.Replace(".agl", ".go", 1)
	os.WriteFile(path, src.AsBytes(), 0644)!

	coreFile := filepath.Join(filepath.Dir(path), "aglCore.go")
	os.WriteFile(coreFile, agl.GenCore("main").AsBytes(), 0644)!

	return nil
}

func buildProject() ! {
	visited := set[string]{}
	buildFolder(".", visited)!
	cmd := exec.Command("go", "build")
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	return cmd.Run()!
}

const modPrefix = "agl/" // TODO get from go.mod

func buildFolder(folderPath string, visited set[string]) ! {
	if visited.Contains(folderPath) {
		return Ok(void)
	}
	visited.Insert(folderPath)
	entries := os.ReadDir(folderPath)!
	for entry in entries {
		if entry.IsDir() {
			continue
		}
		fileName := filepath.Join(folderPath, entry.Name())
		if fileName.HasSuffix(".agl") {
			if buildAglFile(fileName).IsErr() {
				panic(fmt.Sprintf("failed to build %s", fileName))
			}
		} else if fileName.HasSuffix(".go") {
			if fileName.HasSuffix("_test.go") {
				continue
			}
			src := os.ReadFile(fileName)!
			fset := token.NewFileSet()
			var node *ast.File
			if Ok(res) := parser.ParseFile(fset, fileName, src, parser.AllErrors) {
				node = res
			} else {
				fmt.Printf("failed to parse %s\n", fileName)
				continue
			}
			conf := types.Config{Importer: nil}
			info := &types.Info{Defs: make(map[*ast.Ident]types.Object)}
			_, _ = conf.Check("", fset, []*ast.File{node}, info)
			for decl in node.Decls {
				switch d := decl.(type) {
				case *ast.GenDecl:
					for spec in d.Specs {
						switch s := spec.(type) {
						case *ast.ImportSpec:
							pathValue := s.Path.Value.ReplaceAll(`"`, ``)
							if pathValue.HasPrefix(modPrefix) {
								newPath := pathValue.TrimPrefix(modPrefix)
								buildFolder(newPath, visited)!
							}
						}
					}
				}
			}
		}
	}
	return Ok(void)
}

func buildAglFile(fileName string) ! {
	by := os.ReadFile(fileName)!
	fset, f, f2 := agl.ParseSrc(string(by))
	env := agl.NewEnv(fset)
	i := agl.NewInferrer(env)
	i.InferFile(fileName, f, fset, true)
	src := agl.NewGenerator(i.Env, f, f2, fset).Generate()
	path := fileName.Replace(".agl", "_agl.go", 1)
	os.WriteFile(path, []byte(src), 0644)!
	return Ok(void)
}

func startAction(ctx context.Context, cmd *cli.Command) error {
	if cmd.NArg() == 0 {
		fmt.Println("You must specify a file to compile")
		return nil
	}
	fileName := cmd.Args().Get(0)
	if fileName == "run" {
		return runAction(ctx, cmd)
	}
	if !fileName.HasSuffix(".agl") {
		fmt.Println("file must have '.agl' extension")
		return nil
	}
	by := os.ReadFile(fileName)!
	fset, f, f2 := agl.ParseSrc(string(by))
	env := agl.NewEnv(fset)
	i := agl.NewInferrer(env)
	i.InferFile(fileName, f, fset, true)
	g := agl.NewGenerator(i.Env, f, f2, fset)
	fmt.Println(g.Generate())
	return nil
}

func insertHeadersAfterFirstLine(src, headers string) string {
	lines := src.Lines()
	if lines.IsEmpty() {
		return src
	}

	// Find the package declaration line
	packageLineIndex := -1
	for i, line := range lines {
		if line.TrimSpace().HasPrefix("package ") {
			packageLineIndex = i
			break
		}
	}

	if packageLineIndex == -1 {
		// If no package declaration found, just prepend headers
		return headers + "\n" + src
	}

	// Insert headers after the package declaration
	var result []string
	result.Push(lines[:packageLineIndex+1]...)
	result.Push(headers)
	result.Push(lines[packageLineIndex+1:]...)

	return result.Joined("\n")
}

func modInitAction(_ context.Context, c *cli.Command) error {
	cmd := exec.Command("go", "mod", "init", c.Args().First())
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Run()!
	return nil
}

func modTidyAction(_ context.Context, c *cli.Command) error {
	cmd := exec.Command("go", "mod", "tidy")
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Run()!
	return nil
}

func modVendorAction(_ context.Context, c *cli.Command) error {
	entries := os.ReadDir(".")!
	var imports []string
	for entry in entries {
		if entry.IsDir() {
			continue
		}
		if entry.Name().HasSuffix(".agl") {
			by := os.ReadFile(entry.Name())!
			_, f, _ := agl.ParseSrc(string(by))
			for i in f.Imports {
				imports.Push(fmt.Sprintf("import _ %s", i.Path.Value))
			}
		}
	}
	importsStr := imports.Joined("\n")
	const tmpGoFile = "aglTmp.go"
	os.WriteFile(tmpGoFile, []byte("package main\n"+importsStr), 0644)!
	defer os.Remove(tmpGoFile)
	cmd := exec.Command("go", "mod", "vendor")
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Run()!
	return nil
}

func versionAction(ctx context.Context, cmd *cli.Command) error {
	fmt.Printf("AGL v%s\n", version)
	return nil
}
